<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://vuckale.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://vuckale.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-04T02:10:53+00:00</updated><id>https://vuckale.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Creating an Isolated VPN Namespace with WireGuard</title><link href="https://vuckale.github.io/blog/2025/test/" rel="alternate" type="text/html" title="Creating an Isolated VPN Namespace with WireGuard"/><published>2025-04-22T15:00:00+00:00</published><updated>2025-04-22T15:00:00+00:00</updated><id>https://vuckale.github.io/blog/2025/test</id><content type="html" xml:base="https://vuckale.github.io/blog/2025/test/"><![CDATA[<p>In this post, I’m setting up secure remote access to an isolated network using WireGuard. This is useful for scenarios where you need to reach machines on a private or segmented network—like lab setups, internal servers, or test environments—without punching holes in firewalls or exposing anything to the internet. The goal is to keep the network locked down while still being able to interact with it when needed, using a clean, minimal VPN tunnel. This setup assumes a Linux environment and uses systemd to manage the WireGuard interface through wg-quick, allowing the tunnel to start automatically at boot. While WireGuard is cross-platform, this post focuses strictly on the Linux side.</p> <h2 id="step-1-create-the-network-namespace">Step 1: Create the Network Namespace</h2> <p>Network namespaces let you build isolated networking environments on a single machine — each with its own interfaces, routing tables, and DNS settings. We’ll start by creating one named <code class="language-plaintext highlighter-rouge">vpnspace</code>.</p> <h3 id="command">Command:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns add vpnspace
</code></pre></div></div> <p>To confirm it was created:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip netns list
</code></pre></div></div> <p>You should see <code class="language-plaintext highlighter-rouge">vpnspace</code> listed.</p> <hr/> <h2 id="step-2-create-a-virtual-ethernet-pair">Step 2: Create a Virtual Ethernet Pair</h2> <p>To connect your main system to the new namespace, you need a virtual network cable — a <em>veth</em> pair. It acts like a tunnel between the two environments.</p> <h3 id="command-1">Command:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip <span class="nb">link </span>add veth0 <span class="nb">type </span>veth peer name veth1
</code></pre></div></div> <p>This creates:</p> <ul> <li><code class="language-plaintext highlighter-rouge">veth0</code>: stays in the <strong>host</strong></li> <li><code class="language-plaintext highlighter-rouge">veth1</code>: will be moved into <code class="language-plaintext highlighter-rouge">vpnspace</code></li> </ul> <p>To check both were created:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip <span class="nb">link </span>show
</code></pre></div></div> <p>Look for entries like <code class="language-plaintext highlighter-rouge">veth0</code> and <code class="language-plaintext highlighter-rouge">veth1</code>.</p> <hr/> <h2 id="step-3-move-one-end-into-the-namespace">Step 3: Move One End Into the Namespace</h2> <p>Now isolate one end of the pair by moving <code class="language-plaintext highlighter-rouge">veth1</code> into the <code class="language-plaintext highlighter-rouge">vpnspace</code>.</p> <h3 id="command-2">Command:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip <span class="nb">link set </span>veth1 netns vpnspace
</code></pre></div></div> <p>To confirm:</p> <ul> <li>On the host: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip <span class="nb">link </span>show
</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">veth1</code> should be gone.</p> </li> <li>Inside the namespace: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ip <span class="nb">link </span>show
</code></pre></div> </div> <p>You should see <code class="language-plaintext highlighter-rouge">veth1</code> and <code class="language-plaintext highlighter-rouge">lo</code>.</p> </li> </ul> <hr/> <h2 id="step-4-assign-ip-addresses">Step 4: Assign IP Addresses</h2> <p>We’ll assign IPs to each end of the virtual cable using the subnet <code class="language-plaintext highlighter-rouge">10.200.200.0/24</code>.</p> <h3 id="why-this-subnet">Why this subnet?</h3> <ul> <li>It’s part of <code class="language-plaintext highlighter-rouge">10.0.0.0/8</code>, a private range (RFC1918).</li> <li>Less likely to conflict with common home networks (like <code class="language-plaintext highlighter-rouge">192.168.0.0/24</code>).</li> <li>A <code class="language-plaintext highlighter-rouge">/24</code> netmask gives 256 usable addresses, which is more than enough here.</li> </ul> <p>We’ll use:</p> <ul> <li><code class="language-plaintext highlighter-rouge">10.200.200.1</code> on <code class="language-plaintext highlighter-rouge">veth0</code> (host)</li> <li><code class="language-plaintext highlighter-rouge">10.200.200.2</code> on <code class="language-plaintext highlighter-rouge">veth1</code> (namespace)</li> </ul> <hr/> <h3 id="assign-ip-to-the-host-side">Assign IP to the Host Side</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip addr add 10.200.200.1/24 dev veth0
<span class="nb">sudo </span>ip <span class="nb">link set </span>veth0 up
</code></pre></div></div> <p>To verify:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip addr show veth0
</code></pre></div></div> <hr/> <h3 id="assign-ip-to-the-namespace-side">Assign IP to the Namespace Side</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ip addr add 10.200.200.2/24 dev veth1
<span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ip <span class="nb">link set </span>veth1 up
<span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ip <span class="nb">link set </span>lo up
</code></pre></div></div> <p>To verify:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ip addr show
</code></pre></div></div> <hr/> <h2 id="step-5-add-a-default-route-in-the-namespace">Step 5: Add a Default Route in the Namespace</h2> <p>Tell the namespace to send all outgoing traffic to the host, which will act as a gateway.</p> <h3 id="command-3">Command:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ip route add default via 10.200.200.1
</code></pre></div></div> <p>To confirm:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ip route
</code></pre></div></div> <p>You should see:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>default via 10.200.200.1 dev veth1
</code></pre></div></div> <hr/> <h2 id="step-6-set-up-nat-internet-access">Step 6: Set Up NAT (Internet Access)</h2> <p>Your host will now masquerade (translate) outbound traffic from the namespace so it can access the internet.</p> <p>First, determine your host’s internet-facing interface:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip route | <span class="nb">grep </span>default
</code></pre></div></div> <p>Look for something like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>default via 192.168.1.1 dev eth0
</code></pre></div></div> <p>Use that interface (e.g., <code class="language-plaintext highlighter-rouge">eth0</code>) in the next command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-s</span> 10.200.200.0/24 <span class="nt">-o</span> eth0 <span class="nt">-j</span> MASQUERADE
</code></pre></div></div> <p>To see that the rule was added:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>iptables <span class="nt">-t</span> nat <span class="nt">-L</span> POSTROUTING <span class="nt">-n</span> <span class="nt">--line-numbers</span>
</code></pre></div></div> <hr/> <h2 id="step-7-allow-forwarding-between-interfaces">Step 7: Allow Forwarding Between Interfaces</h2> <p>Assuming your main interface is <code class="language-plaintext highlighter-rouge">eth0</code>, adjust the firewall to allow traffic through.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> veth0 <span class="nt">-o</span> eth0 <span class="nt">-j</span> ACCEPT
<span class="nb">sudo </span>iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> eth0 <span class="nt">-o</span> veth0 <span class="nt">-m</span> state <span class="nt">--state</span> RELATED,ESTABLISHED <span class="nt">-j</span> ACCEPT
</code></pre></div></div> <hr/> <h2 id="step-8-test-basic-connectivity">Step 8: Test Basic Connectivity</h2> <p>Try pinging from inside the namespace:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ping <span class="nt">-c</span> 4 8.8.8.8
</code></pre></div></div> <p>You should see successful responses. If not, double-check IPs, NAT, and routing.</p> <hr/> <h2 id="step-9-configure-static-dns-in-the-namespace">Step 9: Configure Static DNS in the Namespace</h2> <p>By default, the namespace doesn’t inherit your system’s DNS. We’ll add a static one.</p> <h3 id="command-4">Command:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"nameserver 1.1.1.1"</span> | <span class="nb">sudo tee</span> /etc/netns/vpnspace/resolv.conf
</code></pre></div></div> <p>Other valid options:</p> <ul> <li><code class="language-plaintext highlighter-rouge">8.8.8.8</code> (Google)</li> <li><code class="language-plaintext highlighter-rouge">9.9.9.9</code> (Quad9)</li> </ul> <p>To check:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /etc/netns/vpnspace/resolv.conf
</code></pre></div></div> <p>Now test DNS resolution:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace ping <span class="nt">-c</span> 4 google.com
</code></pre></div></div> <hr/> <h2 id="step-10-prepare-wireguard-configuration">Step 10: Prepare WireGuard Configuration</h2> <p>WireGuard config files should stay in the standard location:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/wireguard/wg0.conf
</code></pre></div></div> <p>Do <strong>not</strong> move them into <code class="language-plaintext highlighter-rouge">/etc/netns/vpnspace/</code>.</p> <p>Make sure to <strong>disable the DNS option</strong> in your config.</p> <h3 id="example-wg0conf">Example <code class="language-plaintext highlighter-rouge">wg0.conf</code>:</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Interface]
PrivateKey = &lt;your-private-key&gt;
Address = 10.2.0.2/32
# DNS = 10.2.0.1   &lt;-- disable or remove this

[Peer]
PublicKey = &lt;peer-public-key&gt;
AllowedIPs = 0.0.0.0/0
Endpoint = &lt;vpn-endpoint&gt;:51820
</code></pre></div></div> <hr/> <h2 id="step-11-start-wireguard-in-the-namespace">Step 11: Start WireGuard in the Namespace</h2> <p>Bring up the VPN interface using <code class="language-plaintext highlighter-rouge">wg-quick</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace wg-quick up wg0
</code></pre></div></div> <p>You should see logs like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[#] ip link add wg0 type wireguard
[#] wg setconf wg0 /dev/fd/63
[#] ip -4 address add ...
[#] ip link set mtu ...
</code></pre></div></div> <hr/> <h2 id="step-12-confirm-vpn-is-active">Step 12: Confirm VPN is Active</h2> <p>To check the public IP from inside the namespace:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ip netns <span class="nb">exec </span>vpnspace curl ifconfig.me
</code></pre></div></div> <p>Now compare that with your host’s IP:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl ifconfig.me
</code></pre></div></div> <p>The namespace should now show the <strong>VPN’s exit IP</strong>, while the host retains its original IP.</p> <hr/> <h2 id="final-automation-script">Final Automation Script</h2> <p>Here’s a full setup script to automate everything:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># Create namespace</span>
ip netns add vpnspace 2&gt;/dev/null

<span class="c"># Create veth pair</span>
ip <span class="nb">link </span>add veth0 <span class="nb">type </span>veth peer name veth1 2&gt;/dev/null
ip <span class="nb">link set </span>veth1 netns vpnspace

<span class="c"># Assign IPs</span>
ip addr add 10.200.200.1/24 dev veth0 <span class="o">||</span> <span class="nb">true
</span>ip <span class="nb">link set </span>veth0 up

ip netns <span class="nb">exec </span>vpnspace ip addr add 10.200.200.2/24 dev veth1 <span class="o">||</span> <span class="nb">true
</span>ip netns <span class="nb">exec </span>vpnspace ip <span class="nb">link set </span>veth1 up
ip netns <span class="nb">exec </span>vpnspace ip <span class="nb">link set </span>lo up

<span class="c"># Add default route</span>
ip netns <span class="nb">exec </span>vpnspace ip route add default via 10.200.200.1 <span class="o">||</span> <span class="nb">true</span>

<span class="c"># Enable NAT (adjust interface as needed)</span>
iptables <span class="nt">-t</span> nat <span class="nt">-C</span> POSTROUTING <span class="nt">-s</span> 10.200.200.0/24 <span class="nt">-o</span> ens18 <span class="nt">-j</span> MASQUERADE 2&gt;/dev/null <span class="o">||</span> <span class="se">\</span>
iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-s</span> 10.200.200.0/24 <span class="nt">-o</span> ens18 <span class="nt">-j</span> MASQUERADE

<span class="c"># Allow forwarding</span>
iptables <span class="nt">-C</span> FORWARD <span class="nt">-i</span> veth0 <span class="nt">-o</span> ens18 <span class="nt">-j</span> ACCEPT 2&gt;/dev/null <span class="o">||</span> <span class="se">\</span>
iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> veth0 <span class="nt">-o</span> ens18 <span class="nt">-j</span> ACCEPT

iptables <span class="nt">-C</span> FORWARD <span class="nt">-i</span> ens18 <span class="nt">-o</span> veth0 <span class="nt">-m</span> state <span class="nt">--state</span> RELATED,ESTABLISHED <span class="nt">-j</span> ACCEPT 2&gt;/dev/null <span class="o">||</span> <span class="se">\</span>
iptables <span class="nt">-A</span> FORWARD <span class="nt">-i</span> ens18 <span class="nt">-o</span> veth0 <span class="nt">-m</span> state <span class="nt">--state</span> RELATED,ESTABLISHED <span class="nt">-j</span> ACCEPT

<span class="c"># Start WireGuard</span>
ip netns <span class="nb">exec </span>vpnspace wg-quick up wg0
</code></pre></div></div> <p>Save this to <code class="language-plaintext highlighter-rouge">/usr/local/bin/vpnspace-setup.sh</code>, then:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x /usr/local/bin/vpnspace-setup.sh
<span class="nb">sudo</span> /usr/local/bin/vpnspace-setup.sh
</code></pre></div></div> <hr/> <p>You now have a fully working, isolated VPN namespace using WireGuard.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="code"/><category term="vpn"/><category term="wireguard"/><summary type="html"><![CDATA[This guide walks you through building a fully isolated VPN environment using Linux network namespaces. You’ll create a virtual network, configure NAT and DNS, and run a WireGuard tunnel entirely within its own namespace. This allows for sandboxed VPN traffic without affecting your main system.]]></summary></entry></feed>